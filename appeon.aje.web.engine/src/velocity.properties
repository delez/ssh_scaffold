#
# This is a simple example of a velocity properties file.
#
# Any property that is not listed here will have it's default
# value used.  The default values are located in :
#  *  src/java/org/apache/velocity/runtime/default/velocity.defaults
#  *  http://jakarta.apache.org/velocity/developer-guide.html
#
# as an example, we are changing the name of the velocity log 
#
#runtime.log = velocity_example.log
runtime.log.logsystem.class = org.apache.velocity.runtime.log.AvalonLogSystem
#Class to be used for the Velocity-instantiated log system. 

runtime.log.error.stacktrace = true
runtime.log.warn.stacktrace = false
runtime.log.info.stacktrace = false
#Turns on stacktracing for the three error categories. These produce a large amount of log output. 

runtime.log.invalid.references = true 
#Property to turn off the log output when a reference isn't valid. Good thing to turn of in production, but very valuable for debugging. 

runtime.log.logsystem.avalon.logger = WebEngineer 
#Allows user to specify an existing logger name in the Avalon hierarchy without having to wrap with a LogSystem interface. Note: You must also specify runtime.log.logsystem.class = org.apache.velocity.runtime.log.AvalonLogSystem as the default logsystem may change. There is no guarantee that the Avalon log system will remain the default log system. 



input.encoding = utf-8

output.encoding = utf-8


resource.manager.logwhenfound = true
resource.loader = class

#FileResourceLoader, JarResourceLoader, ClasspathResourceLoader , DataSourceResourceLoader
class.resource.loader.description = Velocity Class Resource Loader
class.resource.loader.class = appeon.aje.webengine.EngineerResourceLoader
class.resource.loader.path = appeon\\aje\\webengine\\db, appeon\\aje\\webengine\\page, appeon\\aje\\webengine\\model,appeon\\aje\\webengine\\meta, appeon\\aje\\webengine\\dao\\ibatis, appeon\\aje\\webengine\\dao, appeon\\aje\\webengine\\struts\\form, appeon\\aje\\webengine\\struts\\page,appeon\\aje\\webengine\\struts2\\page, \\ 
class.resource.loader.cache = true
#file.resource.loader.modificationCheckInterval = 2

directive.foreach.counter.name = velocityCount
#Used in the #foreach() directive, defines the string to be used as the context key for the loop count. A template would access the loop count as $velocityCount. 

directive.foreach.counter.initial.value = 1
#Default starting value for the loop counter reference in a #foreach() loop. 

velocimacro.library = VM_global_library.vm 
#Multi-valued key. Will accept CSV for value. Filename(s) of Velocimacro library to be loaded when the Velocity Runtime engine starts. These Velocimacros are accessable to all templates. The file is assumed to be relative to the root of the file loader resource path. 

velocimacro.permissions.allow.inline = true
#Determines of the definition of new Velocimacros via the #macro() directive in templates is allowed. The default value is true, meaning any template can define and use new Velocimacros. Note that depending on other properties, those #macro() statements can replace global definitions. 

velocimacro.permissions.allow.inline.to.replace.global = false 
#Controls if a Velocimacro defind 'inline' in a template can replace a Velocimacro defined in a library loaded at startup. 

velocimacro.permissions.allow.inline.local.scope = false
#Controls 'private' templates namespaces for Velocimacros. When true, a #macro() directive in a template creates a Velocimacro that is accessable only from the defining template. This means that Velocimacros cannot be shared unless they are in the global or local library loaded at startup. (See above.) It also means that templates cannot interfere with each other. This property also allows a technique where there is a 'default' Velocimacro definition in the global or local library, and a template can 'override' the implementation for use within that template. This occurrs because when this property is true, the template's namespace is searched for a Velocimacro before the global namespace, therefore allowing the override mechanism. 

velocimacro.context.localscope = false
#Controls whether reference access (set/get) within a Velocimacro will change the context, or be of local scope in that Velocimacro. 

velocimacro.library.autoreload = false



